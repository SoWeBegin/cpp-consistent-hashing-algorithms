Rilevamento dell'hash del compilatore per la tripletta x64-windows...
Tutti i pacchetti richiesti sono attualmente installati.
Tempo di installazione totale: 500 ns
The package boost is compatible with built-in CMake targets:

    find_package(Boost REQUIRED [COMPONENTS <libs>...])
    target_link_libraries(main PRIVATE Boost::boost Boost::<lib1> Boost::<lib2> ...)

cxxopts fornisce destinazioni CMake:

  # generato in modo euristico e potrebbe non essere corretto
  find_package(cxxopts CONFIG REQUIRED)
  target_link_libraries(main PRIVATE cxxopts::cxxopts)

The package fmt provides CMake targets:

    find_package(fmt CONFIG REQUIRED)
    target_link_libraries(main PRIVATE fmt::fmt)

    # Or use the header-only version
    find_package(fmt CONFIG REQUIRED)
    target_link_libraries(main PRIVATE fmt::fmt-header-only)

The package gtest is compatible with built-in CMake targets:

    enable_testing()
    
    find_package(GTest CONFIG REQUIRED)
    target_link_libraries(main PRIVATE GTest::gtest GTest::gtest_main GTest::gmock GTest::gmock_main)
    
    add_test(AllTestsInMain main)

gtl è di sola intestazione e può essere usato da CMake tramite:

    find_path(GTL_INCLUDE_DIRS "gtl/adv_utils.hpp")
    target_include_directories(main PRIVATE ${GTL_INCLUDE_DIRS})

pcg è di sola intestazione e può essere usato da CMake tramite:

    find_path(PCG_INCLUDE_DIRS "pcg_extras.hpp")
    target_include_directories(main PRIVATE ${PCG_INCLUDE_DIRS})

xxhash fornisce destinazioni CMake:

  # generato in modo euristico e potrebbe non essere corretto
  find_package(xxHash CONFIG REQUIRED)
  target_link_libraries(main PRIVATE xxHash::xxhash)

yaml-cpp fornisce destinazioni CMake:

  # generato in modo euristico e potrebbe non essere corretto
  find_package(yaml-cpp CONFIG REQUIRED)
  target_link_libraries(main PRIVATE yaml-cpp::yaml-cpp)

